#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Extensions specified in the load list will be loaded by Druid
# We are using local fs for deep storage - not recommended for production - use S3, HDFS, or NFS instead
# We are using local derby for the metadata store - not recommended for production - use MySQL or Postgres instead

# If you specify `druid.extensions.loadList=[]`, Druid won't load any extension from file system.
# If you don't specify `druid.extensions.loadList`, Druid will load all the extensions under root extension directory.
# More info: https://druid.apache.org/docs/latest/operations/including-extensions.htm
{% if druid_tls == true %}
druid.extensions.loadList=["druid-basic-security", "druid-histogram", "druid-datasketches", "druid-kafka-indexing-service", "druid-multi-stage-query", "druid-s3-extensions", "simple-client-sslcontext", "prometheus-emitter", "postgresql-metadata-storage"]
{% else %}
druid.extensions.loadList=["druid-basic-security", "druid-histogram", "druid-datasketches", "druid-kafka-indexing-service", "druid-multi-stage-query", "druid-s3-extensions", "prometheus-emitter", "postgresql-metadata-storage"]
{% endif %}

# If you have a different version of Hadoop, place your Hadoop client jar files in your hadoop-dependencies directory
# and uncomment the line below to point to your directory.
#druid.extensions.hadoopDependenciesDir=/my/dir/hadoop-dependencies

#
# Auth
#
# Druid basic security
druid.auth.authenticatorChain=["Authenticator"]
druid.auth.authenticator.Authenticator.type=basic
druid.auth.authenticator.Authenticator.initialAdminPassword={{ druid_admin_password }}
druid.auth.authenticator.Authenticator.initialInternalClientPassword={{ druid_system_user_password }}
druid.auth.authenticator.Authenticator.credentialsValidator.type=metadata
druid.auth.authenticator.Authenticator.skipOnFailure=false
druid.auth.authenticator.Authenticator.authorizerName=Authorizer
# Escalator
druid.escalator.type=basic
druid.escalator.internalClientUsername=druid_system
druid.escalator.internalClientPassword={{ druid_system_user_password }}
druid.escalator.authorizerName=Authorizer
# Authorizer
druid.auth.authorizers=["Authorizer"]
druid.auth.authorizer.Authorizer.type=basic

#
# TLS
#
{% if druid_tls == true %}
druid.enablePlaintextPort=false
druid.enableTlsPort=true
#druid.tlsPort=8443

druid.server.https.keyStoreType=jks
druid.server.https.keyStorePath={{ druid_keystore_path }}
druid.server.https.keyStorePassword={{ druid_keystore_password }}
druid.server.https.certAlias=druid
druid.server.https.requestClientCertificate=false
druid.server.https.requireClientCertificate=false

druid.client.https.protocol=TLSv1.2
druid.client.https.trustStoreType=jks
druid.client.https.trustStorePath={{ druid_truststore_path }}
druid.client.https.trustStorePassword={{ druid_keystore_password }}
#
# Hostname
#
druid.host={{ druid_domain }}
{%     endif %}


#
# Logging
#

# Log all runtime properties on startup. Disable to avoid logging properties on startup:
druid.startup.logging.logProperties=true

#
# Zookeeper
#

druid.zk.service.host=localhost
druid.zk.paths.base=/druid

#
# Metadata storage
#

# For Derby server on your Druid Coordinator (only viable in a cluster with a single Coordinator, no fail-over):
#druid.metadata.storage.type=derby
#druid.metadata.storage.connector.connectURI=jdbc:derby://localhost:1527/var/druid/metadata.db;create=true
#druid.metadata.storage.connector.host=localhost
#druid.metadata.storage.connector.port=1527

# For MySQL (make sure to include the MySQL JDBC driver on the classpath):
#druid.metadata.storage.type=mysql
#druid.metadata.storage.connector.connectURI=jdbc:mysql://db.example.com:3306/druid
#druid.metadata.storage.connector.user=...
#druid.metadata.storage.connector.password=...

# For PostgreSQL:
druid.metadata.storage.type=postgresql
druid.metadata.storage.connector.connectURI=jdbc:{{postgresql_connection_uri}}
druid.metadata.storage.connector.user={{postgresql_user}}
druid.metadata.storage.connector.password={{postgresql_password}}

#
# Deep storage
#

# For local disk (only viable in a cluster if this is a network mount):
#druid.storage.type=local
#druid.storage.storageDirectory=var/druid/segments

# For HDFS:
#druid.storage.type=hdfs
#druid.storage.storageDirectory=/druid/segments

# For S3:
druid.storage.type=s3
druid.storage.bucket={{ druid_segments_s3_bucket }}
druid.storage.baseKey=druid/segments
druid.s3.endpoint.url={{ druid_s3_endpoint }}
druid.s3.accessKey={{ druid_s3_access_key }}
druid.s3.secretKey={{ druid_s3_secret_key }}
druid.s3.enablePathStyleAccess=true
#druid.s3.endpoint.signingRegion=us-east-1

#
# Indexing service logs
#

# For local disk (only viable in a cluster if this is a network mount):
druid.indexer.logs.type=file
druid.indexer.logs.directory=var/druid/indexing-logs

# For HDFS:
#druid.indexer.logs.type=hdfs
#druid.indexer.logs.directory=/druid/indexing-logs

# For S3:
#druid.indexer.logs.type=s3
#druid.indexer.logs.s3Bucket=
#druid.indexer.logs.s3Prefix=indexing-logs

#
# Service discovery
#

druid.selectors.indexing.serviceName=druid/overlord
druid.selectors.coordinator.serviceName=druid/coordinator

#
# Monitoring
#

druid.monitoring.monitors=["org.apache.druid.java.util.metrics.JvmMonitor"]
druid.emitter=prometheus
druid.emitter.logging.logLevel=info
druid.emitter.prometheus.strategy=exporter
druid.emitter.prometheus.port=9101

# Storage type of double columns
# ommiting this will lead to index double as float at the storage layer

druid.indexing.doubleStorage=double

#
# Security
#
druid.server.hiddenProperties=["druid.s3.accessKey","druid.s3.secretKey","druid.metadata.storage.connector.password", "password", "key", "token", "pwd"]


#
# SQL
#
druid.sql.enable=true

# Planning SQL query when there is aggregate distinct in the statement
druid.sql.planner.useGroupingSetForExactDistinct=true

#
# Lookups
#
druid.lookup.enableLookupSyncOnStartup=false

#
# Expression processing config
#
druid.expressions.useStrictBooleans=true

#
# Http client
#
druid.global.http.eagerInitialization=false
